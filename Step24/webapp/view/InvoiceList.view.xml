<mvc:View
   controllerName="sap.ui.demo.walkthrough.controller.InvoiceList"
   xmlns="sap.m"
   xmlns:mvc="sap.ui.core.mvc">
   <List
      id="invoiceList"
      class="sapUiResponsiveMargin"
      width="auto"
       items="{
         path : 'invoice>/Invoices',
         sorter : {
            path : 'ShipperName',
            group : true 
         }
      }" >
      <headerToolbar>
         <Toolbar>
            <Title text="{i18n>invoiceListTitle}"/>
            <ToolbarSpacer/>
            <SearchField width="50%" search=".onFilterInvoices"/>
         </Toolbar>
      </headerToolbar>
       <items>
         <ObjectListItem
            title="{invoice>Quantity} x {invoice>ProductName}"
            number="{
                    parts: [{path: 'invoice>ExtendedPrice'}, {path: 'view>/currency'}],
                    type: 'sap.ui.model.type.Currency',
                    formatOptions: {
                            showMeasure:false
                    }
            }"
            numberUnit="{view>/currency}"
            numberState="{=${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success'}">
            <firstStatus>
               <ObjectStatus text="{
                     path: 'invoice>Status',
                     formatter: '.formatter.statusText'
               }"/>
            </firstStatus>
         </ObjectListItem>   
      </items>
   </List>
</mvc:View>  

<!-- view내부의 인보이스 목록에 가격을 표시할 것이다.
ObjectListItem의 number속성에 특수 바인딩 구문을 사용하고 있다.
이 바인딩 구문은 한 control의 단일속성에 다른 모델의 여러 속성을 바인딩 할 수 있게 해주는 "Calculated Field"를 사용한다.
다른 모델에서 바인딩된 속성을 "parts"라고 한다.
컨트롤의 속성은 숫자이며 서로 다른 두 모델에서 가져온 바인딩 된 속성("parts")은 Invoice> ExtendedPrice 및 view> / currency이다.

App에서 직접 정의한 통화는 유로화로 가격을 표시할 것이다.
따라서 송장 목록용 controller를 추가하고 currency 속성을 두번째 part로 바인딩 받아 사용한다.
Type은 Currency을 통해 통화에 기초한 가격 표시를 한다.(여기서는 가격이 소수 2 자리로 표시된다.)
포맷 옵션은 showMeasure를 false로 설정한다. 이것은 ObjectListItem 컨트롤에 별도의 속성 numberUnit으로 전달되기 때문에 통화 코드를 금액 앞에 나타나지 않게 숨긴다. -->

<!-- headerText 대신 id값과 headerToolbar 태그를 사용 이것의 aggregation은 목록 헤더에 대한 간단한 title 속성을 대체한다.
sap.m.title 컨트롤 ToolbarSpacer를 이용해 왼쪽에 표시 하고 sap.m.SearchField를 사용하여 오른쪽에 위치시킨다.-->

<!-- 데이터 Path를 지정하고 sorter 속성을 추가한다.
송장 항목을 정렬은 데이터 path를 지정하면 자동으로 수행된다.
기본적으로 정렬은 오름차순이지만, 정렬 순서를 변경하려면 sorter 속성 내에서 descending을  true로 지정하면 된다.
sorter 속성에 group을 true로 설정하면 송장 품목을 자동으로 그룹화한다. 
SAPUI5의 List 및 데이터 Binding 기능은 Group header을 자동으로 표시하고 그룹의 항목을 분류한다.
groupHeaderFactory 속성을 설정하여 원하는 경우 custom grouping function를 정의 할 수 있다. -->