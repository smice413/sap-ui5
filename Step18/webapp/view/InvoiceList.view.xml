<mvc:View
   controllerName="sap.ui.demo.walkthrough.controller.InvoiceList"
   xmlns="sap.m"
   xmlns:mvc="sap.ui.core.mvc">
   <List
      headerText="{i18n>invoiceListTitle}"
      class="sapUiResponsiveMargin"
      width="auto"
      items="{invoice>/Invoices}" >
      <items>
         <ObjectListItem
            title="{invoice>Quantity} x {invoice>ProductName}"
            number="{
                    parts: [{path: 'invoice>ExtendedPrice'}, {path: 'view>/currency'}],
                    type: 'sap.ui.model.type.Currency',
                    formatOptions: {
                            showMeasure:false
                    }
            }"
            numberUnit="{view>/currency}"
            numberState="{=${invoice>ExtendedPrice} > 50 ? 'Error' : 'Success'}"/>
      </items>
   </List>
</mvc:View>  

<!-- view내부의 인보이스 목록에 가격을 표시할 것이다.
ObjectListItem의 number속성에 특수 바인딩 구문을 사용하고 있다.
이 바인딩 구문은 한 control의 단일속성에 다른 모델의 여러 속성을 바인딩 할 수 있게 해주는 "Calculated Field"를 사용한다.
다른 모델에서 바인딩된 속성을 "parts"라고 한다.
컨트롤의 속성은 숫자이며 서로 다른 두 모델에서 가져온 바인딩 된 속성("parts")은 Invoice> ExtendedPrice 및 view> / currency이다.

App에서 직접 정의한 통화는 유로화로 가격을 표시할 것이다.
따라서 송장 목록용 controller를 추가하고 currency 속성을 두번째 part로 바인딩 받아 사용한다.
Type은 Currency을 통해 통화에 기초한 가격 표시를 한다.(여기서는 가격이 소수 2 자리로 표시된다.)
포맷 옵션은 showMeasure를 false로 설정한다. 이것은 ObjectListItem 컨트롤에 별도의 속성 numberUnit으로 전달되기 때문에 통화 코드를 금액 앞에 나타나지 않게 숨긴다. -->

<!-- 
numberState 속성을 추가하고 중괄호({ }) 안에 =로 시작하는 새로운 바인딩 구문을 알아보자
이 형식은 새로운 바인딩 구문을 시작하는 데 사용된다.
표현식 이라고하며 여기에 표시된 3항 연산자와 같은 간단한 계산 논리를 수행 할 수 있다.
연산자의 조건은 데이터 모델의 값이다.  
expression binding 내부의 모델 바인딩은 $ 기호를 사용해야 한다. 가격이 50보다 높으면 상태를 '오류'(숫자가 빨간색으로 표시됨)로 설정하고 그렇지 않으면 '성공'(숫자가 녹색으로 표시됨)으로 설정한다. -->